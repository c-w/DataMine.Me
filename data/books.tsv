Date	URL	Title	Topic	Summary
2014-08-04	http://columbia-applied-data-science.github.io/appdatasci.pdf	Applied Data Science	Data Science	Gentle introduction to basic data science concepts. The section on out-of-bag estimation for training of multiple classifiers on small amounts of data was interesting.
2014-08-05	http://www.amazon.co.uk/gp/product/B002RMSZ7E/	Apprenticeship Patterns: Guidance for the Aspiring Software Craftsman	Software Engineering	Very succinct and plainly written. Preaches nothing radically novel - if you've read The Pragmatic Programmer, The Mythical Man Month, Code Complete or other similar books you probably won't find many new ideas here. Being more to-the-point than any of the other tomes, the book would however make an excellent first foray into software craftsmanship.
2014-08-13	http://www.amazon.co.uk/dp/B00HJUBRPG/	Don't Make Me Think, Revisited: A Common Sense Approach to Web Usability	Design	Short and a pleasure to read. Most of the topics covered shouldn't come as a surprise, but the book is a good way of bringing the most important web-design considerations back into active memory.
2014-08-29	http://www.amazon.co.uk/dp/B00B8V09HY/	Effective Java: Second Edition	Software Engineering	Not as mind-blowing as on its first read through, but still lots of good stuff. The first few chapters are a good general read and reminder of some of the important things when writing software. The later chapters (concurrency, serialization, etc.) make for good reference material.
2014-09-28	http://www.amazon.co.uk/dp/B00DY5A8X2/	Peopleware: Productive Projects and Teams	Management	More of a hand-book for managers than a book about management. Lots of good, common sense advise about the day-to-day of building teams and running projects... But not very useful for non-manager types.
2014-10-25	http://www.amazon.co.uk/dp/0132350882/	Clean Code: A Handbook of Agile Software Craftsmanship	Software Engineering	Lots of good stuff in here about low level things that make code readable. The writing is quite entertaining. Most importantly, the book has lots of examples that make it easy to relate to the concepts that the author is trying to communicate. However, most (if not all) of the stuff in here is very basic and should already be known to anyone who has been writing software professionally for any amount of time. The book probably is a great resource for someone about to start an internship, but beyond that, I question its value.
2014-11-30	http://www.amazon.co.uk/dp/0978739213/	Release It!: Design and Deploy Production-Ready Software	Software Engineering	This book was a real mixed bag. On one hand, a lot of the advice in the book seemed quite technology specific and will probably be out-of-date sooner rather than later. On the other hand, there was a lot of good stuff in here about how to build robust and failure-tolerant systems and architecture. Just being aware of the patterns and failure-modes that the book talks about made me think differently about my day-to-day work. This is one to be re-visited further down the road of the software developer journey.
2015-01-18	http://www.amazon.co.uk/dp/0321213351/	Refactoring to Patterns	Software Engineering	Not sure how useful this book is. On one hand, the text offers a good introduction to some of the more widely used patterns - much more approachable than the Gang-of-Four book. On the other hand, because the book focuses on the more readily applicable patterns, I found there to be little value or news in the text.
2015-02-20	http://www.amazon.co.uk/dp/B00TKGY0GU/	Effective Python: 59 Specific Ways to Write Better Python	Software Engineering	Much more language specific than 'Effective Java'. Most of the stuff in here would probably be of most use to advanced beginners and should be obvious to anyone with some experience (Pythonic Thinking, Functions, Classes and Inheritance, Built-in Modules, Collaboration, Production). Some of the contents I found useful (descriptors, metaclasses, concurrency),
2015-02-21	http://www.amazon.co.uk/dp/B008HMN5BE/	Data Jujitsu: The Art of Turning Data into Product	Data Science	Interesting diatribe porting some of the lean-agile principles to data-based products. E.g. validate product idea before investing in fancy algorithms and systems (c.f. Amazon building simple collaborative filtering to validate need for recommender systems, c.f. Using humans as initial version of a machine learning system). E.g. trade-off precall for precision when machine learning system has accountability i.e. explains what it's doing: false positives are more costly in terms of user trust. E.g. ground user's expectations: under-promise and over-deliver. E.g. use humans in the loop (c.f. LinkedIn's recommend this recommended job to a friend acts both as a buffer to not disappoint users with bad recommendations and as a way to get good training data on which jobs are relevant). E.g. engage users with the product (c.f. Give access to user's data so that they can feel in charge and clean it up). E.g. try to collect highest quality data possible (c.f. Limit number of free-text fields, pre-populate fields, etc.).
2015-06-06	http://www.amazon.co.uk/dp/B00HEL13HW/	Lean Software Development: An Agile Toolkit	Software Engineering	The first few chapters of this book were quite interesting, likening the origins of the lean software movement to its roots in lean manufacturing: which practices made sense to port over, which were inappropriate, what ideas should we still adopt, etc. I especially liked the rather critical view taken on the dogmatic appropriation of Agile techniques - a breath of fresh air. The later parts of the book strayed into a lot heavier management territory and thus were less useful from an software engineer's point of view: team building, motivation, contracts, etc. Summary: the first half well worth reading, the latter half only for aspiring managers.
2015-10-15	http://www.amazon.co.uk/dp/B004R9QACC/	The Psychology of Computer Programming	Software Engineering	An interesting classic: thirty years old and yet it contains a lot of wisdom that is only slowly and gradually being accepted and applied (and where it is applied, usually to universal success) -- however, the book is also quite dated in many ways, relatively low on information density and therefore ultimately not an enjoyable-or-commendable read to anyone but the 'Agile historian'; more modern texts simply offer more to the practitioner.
2015-10-30	http://www.amazon.co.uk/dp/B005OYHF0A/	Working Effectively with Legacy Code	Software Engineering	One of the best hands-on books on writing good code in recent memory. Lots of practical advice on how to write testable (i.e. maintainable) code and how to safely make bad code more testable. Succinctly written and a good reference on the how-why-and-when of a variety of refactors.
