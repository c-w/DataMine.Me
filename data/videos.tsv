Date	URL	Title	Topic	Summary
2014-08-04	https://www.youtube.com/watch?v=Xg8UtTgziZE	Hierarchical Text Classification using Python (and friends)	Natural Language Processing	Interesting learning approach that uses tree-like structure in data explicitly.
2014-08-04	https://www.youtube.com/watch?v=dBqyvpfHy8k	Authorship Attribution Using Python	Natural Language Processing	Stylometry using POS, word and character level TF-IDF 1,2,3-grams.
2014-08-04	https://www.youtube.com/watch?v=MdkHLS0FPMk	Most Winning A/B Test Results are Illusory	Statistics	Great list of A/B testing gotchas.
2014-08-04	https://www.youtube.com/watch?v=CHjWMpWVaTQ	Recommenders in Python	Machine Learning	Basic recommender systems using distance measures and SVD.
2014-08-05	https://www.youtube.com/watch?v=SpBeJxIiLSs	ApacheCon Keynote	Data Science	Motivational keynote: history, definition, current applications and future of data science.
2014-08-05	https://www.youtube.com/watch?v=jVMWT7I3ATM	Search is not a solved problem	Computer Science	Better search using real-time engagement metrics and content overlap.
2014-08-05	https://www.youtube.com/watch?v=P74spbN4PLE	Real-World Machine Learning on Big Data: Which Methods Should You Use?	Machine Learning	Overview of different types of machine learning formulations and how to pragmatically choose between them: accuracy vs training/test speed vs interpretability vs simplicity.
2014-08-05	https://www.youtube.com/watch?v=3Z8Y_NCS0Tk	Text mining to correct missing CRM information	Natural Language Processing	Tokenization + TF-IDF + SVD to find and propagate similarities in text.
2014-08-05	https://www.youtube.com/watch?v=t4IYPCnC5iA	Measuring and Predicting Departures from Routine in Human Mobility	Machine Learning	Using Bayesian Nets to model spatio-temporal behavior.
2014-08-05	https://www.youtube.com/watch?v=zQFHHHwc-9g	Winning Ways for Your Visualization Plays	Data Science	Biases and pitfalls in visualization.
2014-08-06	https://www.youtube.com/watch?v=R_fZNQM-2o4	Measuring Similarity & Clustering Data	Machine Learning	K-means clustering: run multiple times to approach global optimum, does not work well if variance is uneven in different dimensions (assumes spherical data), works well in presence of redundant dimensions but breaks down with noise, distance in high dimensions is not meaningful, use silhouette score for evaluation (ratio of distance to cluster center to all other centroids). Spectral clustering: looks for close-by points that are not close to other points. Construct similarity graph of points, find graph Laplacian, eigenvalue decomposition, take smallest eigenvectors and run K-means in there => increases performance.
2014-08-06	https://www.youtube.com/watch?v=eLI6REKO7Qc	Getting it out there: Python, Javascript and Web-visualizations	Data Science	Pragmatic Python/Javascript for visualization.
2014-08-06	https://www.youtube.com/watch?v=yg1ZVdpCbFs	Probabilistic Data Structures & Approximate Solutions	Computer Science	Randomized sampling. Bloom filter. Log-log/hash-based cardinality estimation. Count-min sketch. Approximate databases for faster queries e.g. BlinkDB.
2014-08-06	https://www.youtube.com/watch?v=FX7qSwz3SCk	Introducing Dat: If Git Were Designed For Big Data	Computer Science	Databases/repositories for real-time data synchronization.
2014-08-06	https://www.youtube.com/watch?v=irP5RCdpilc	Algorithmic Illusions: Hidden Biases of Big Data	Data Science	Need to use different sources of data in order not to be blinded by sampling biases in data analysis.
2014-08-06	https://www.youtube.com/watch?v=LMHOilUtX8o	Storytelling in the Age of Big Data	Data Science	Using data for good - the need for a human story that motivates data analysis in order to bring about change.
2014-08-06	https://www.youtube.com/watch?v=sAKTN-PeSwE	Committing to Recommendation Algorithms	Machine Learning	Using human validation in the recommender system loop.
2014-08-06	https://www.youtube.com/watch?v=A6qWCgGHT3k	Getting Big Benefits from Big Data	Data Science	Fluff. Need for communication of data science results to people who speak a different/business language.
2014-08-09	https://www.youtube.com/watch?v=fRN3nrrwngs	An introduction to video action recognition	Computer Vision	Media Lovin' Toolkit = good video processing library for Python. Action recognition = optical flow + Harris corner detection + clustering.
2014-08-09	https://www.youtube.com/watch?v=bRzOBGLCRbc	Recommender Systems - The Art and Science of Matching Items to Users	Machine Learning	Unsupervised recommender systems. Baseline: cluster users + recommend most liked item in every cluster. Need to take exposure-to-item into consideration. Use random sub-population to get seeds in order to get rid of biases. Use bandit algorithm to find good seed items to suggest.
2014-08-09	https://www.youtube.com/watch?v=GBzoNgqF-gQ	How to find patterns in large graphs	Computer Science	Graphs are not random. E.g. node-degree is Zipfian, can estimate number of three-way connections via eigenvalues. Can find similar laws for other quantities e.g. number of edges related to number of nodes over time, etc.
2014-08-13	https://www.youtube.com/watch?v=xeAB10QgDW8	Machine learning the hard way -- a story about ponies	Machine Learning	Lessons: features with high variance can dominate other features, read the scikits-docs ;-) e.g. useful algorithm-choice cheat-sheet and hints on how to tune algorithms, can extend scikits with custom loss function, randomize training data.
2014-08-14	https://www.youtube.com/watch?v=hjW4gL9hioY	How to Create Interactive Browser Visualizations from Python with Bokeh	Data Science	Bokeh library: like D3 but without having to use JavaScript.
2014-08-14	https://www.youtube.com/watch?v=d1a4Jbjc-vU	The Future of Python - A Choose Your Own Adventure	Software Engineering	Interesting Python stuff: PyWeek (week-long game jam), Kivy (mobile apps library).
2014-08-15	https://www.youtube.com/watch?v=c-kav7Tf834	Maintainable JavaScript	Software Engineering	Importance of coding standards, programming principles and automation for readable and easily understandable code.
2014-08-15	https://www.youtube.com/watch?v=_RRnyChxijA	Building a JavaScript-Based Game Engine for the Web	Libraries	Isometric JavaScript game engine (not canvas based).
2014-08-15	https://www.youtube.com/watch?v=PV_cFx29Xz0	Javascript sucks and it doesn't matter	Libraries	Stuff to make development in JavaScript less painful: linters, unit testing libraries, testing of rendered pages using headless browsers like Zombie, avoid object orientation, amd for packaging.
2014-08-16	https://www.youtube.com/watch?v=IWPgUn8tL8s	It's not what you read, it's what you ignore	Software Engineering	Effectiveness (doing the right things) vs efficiency (doing the thing right), single tasking.
2014-08-16	https://www.youtube.com/watch?v=KaLROwp-VDY	How to get productive in a project in 24h	Software Engineering	Mining version control to find trouble spots in a code-base: periodic cycles of commits are bad. Using sonar or NDepend to measure types of cohesion and other types of smells: coupling-in and coupling-out, percentage of abstract over concrete coupling, etc. Important: evolution of code metrics over time (more important than point-values, especially if tied to check-ins to see commits or team-members who reduce/increase metrics over time). Beta-cohesion (how much of the object's state does the method touch) can help in deciding whether a method should go on an object or not. Cyclomatic complexity: how many branches in the code, good idea for refactoring. Code risk metrics: ratio of tests to cyclomatic complexity and how far test are away in the call graph.
2014-08-16	https://www.youtube.com/watch?v=FPBVxpl8NMo	Why you should talk to strangers	Software Engineering	Taking inspiration from other languages and paradigms: higher order functions, contracts, actor-based.
2014-08-16	https://www.youtube.com/watch?v=bobeo5kFz1g	Bayesian statistics made (as) simple (as possible)	Statistics	Diachronic interpretation of Bayes' Theorem (belief update): P(H_{t+1}|E) = P(H_t) * P(E|H_t)/P(E).
2014-08-18	https://www.youtube.com/watch?v=90NsjKvz9Ns	User Interface Algorithms	Computer Science	Voronoi tessellations to maximise hit-area for UI elements: a lot faster than computing closest points on mouse-move as only have to have a handler on Voronoi-cell enter and exit. Consider triangles to make menu dialog disappearing less annoying: the closer a user moves to a menu item, the more resistance there is to close the menu dialog. As long as the mouse moves more right than down, keep the menu open.
2014-08-18	https://www.youtube.com/watch?v=heh4OeB9A-c	How To Design A Good API and Why it Matters	Software Engineering	Covers some of the same things as "Effective Java". New things include the following. API process. Start with 1-page spec, keep it agile and bounce the spec off other people and then implement towards this spec to test the API proposal (not a waste of time: can use as examples in documentation). Functionality should be easy to explain - if it's hard to name it probably does too much. "When in doubt, leave it out." Easier to add things to an API than to remove. What to document: side-effects, who owns objects passed into methods, preconditions/postconditions. "Don't make the client do anything the module could do." Principle of least astonishment.
2014-08-18	https://www.youtube.com/watch?v=qCdpTji8nxo	How to Design Great APIs	Software Engineering	Intuitive: make similar things look similar, use parallel structure, dangerous things should be ugly. Great documentation: reference docs + tutorials + quick-start. Opinionated: pick one way and stick with it (coding conventions, stick to one underlying philosophy, etc.).
2014-08-18	https://www.youtube.com/watch?v=012mt05yzjc	Best Practices in Javascript Library Design	Software Engineering	Using same methods and naming conventions on all objects. Fewer methods and less code is better: easier to learn, more maintainable. Generate test-case permutations. Structured format for documentation allows for custom documentation browsers - different people want to visualise documentation in different ways. Maintain library focus - opinionated. Lots of Javascript-specific stuff. Checking user-agent for quirks most reliable and easiest.
2014-08-19	https://www.youtube.com/watch?v=csyL9EC0S0c	Programming is terrible - Lessons learned from a life wasted	Software Engineering	Entertaining rant on lots of things. Very good Q&A at the end. Main topics: code complexity, bad management targets, programming mono-culture, etc. "Write code that is easy to replace, not easy to extend." Programming as a means to an end, not a skill in isolation.
2014-08-19	https://www.youtube.com/watch?v=aWQUSiOZ0x8	The design sprint: from Google Ventures to Google[X]	Software Engineering	5-day design sprint: shorter than lean approach, less investment so easier to cut losses and throw a bad idea away. Tight deadline to get things done. Day 1: find 5 users in for user testing of idea at the end of the week, get right people for project on board. Day 2: find more than one idea, no group brainstorming but individual sketching full flows. Day 3: make good decisions using weighted voting (put stickers on parts of design people like) where core stakeholders have higher power. Day 4: battle royal between most voted ideas - mock all of them up and ready them for user testing. Day 5: run user study (data without launching). "Learn early, learn often" instead of "ship early, ship often" - "rent before you buy." If there are different long-term and short-term stakeholders, use multiple design-sprint teams for different time-lines: requirements for 2 years from now or 4 years from now.
2014-08-19	https://www.youtube.com/watch?v=-C-JoyNuQJs	The JSON Saga	Software Engineering	JSON successful because it's at the intersection of different programming languages, not at the union: it allows to communicate things that every language has. No version number: stability over functionality.
2014-08-19	https://www.youtube.com/watch?v=6O1gNVeaE4g	Fun is the Future: Mastering Gamification	Marketing	Fun and theme not correlated. Status most important motivator instead of cash. Reward early, reward often, don't go negative. Lower bar for engagement. As things become commodities, the customer loyalty becomes the goal.
2014-08-19	https://www.youtube.com/watch?v=XcT4yYu_TTs	How to Write Clean, Testable Code	Software Engineering	Tests should tell a story, project source should be re-constructable just from the tests. Writing tests (executable specs) before code leads to simpler implementation. Easy to test code splits construction of objects and wiring up from logic (if-statements) - easier to mock. Dev-environment should facilitate testing - need to invest in tooling to make writing and running tests easy. Three kings of bugs: thinking bugs (unit testing), wiring bugs (end-to-end tests), "looks funny" (humans). All relatively easy to fix. Super bugs appear when concerns are mixed.
2014-08-21	https://www.youtube.com/watch?v=_ahvzDzKdB0	Growing a Language	Computer Science	A talk on language design. Big languages are great but don't get done. Small languages take too much work to define productive units. Etc. The kicker: the talk only uses words of one syllable unless previously defined in order to make the point against small languages and for extensible languages.
2014-08-21	https://www.youtube.com/watch?v=IF5tGEgRCTQ	Deep Learning for NLP (without Magic) - Part 1	Machine Learning	Most compelling reasons to use deep learning. Feature representation is learnt (reduced need for feature engineering over and over again for every domain/data-set). Ability to come up with distributional representations (less fragile than frequentist. Deals with curse of dimensionality) - network can learn kernel. Enables unsupervised and weight learning. Hierarchical feature representations: combinatorial sharing of statistic strength.
2014-08-21	https://www.youtube.com/watch?v=xPgLS3eAGO0	Deep Learning for NLP (without Magic) - Part 2	Machine Learning	How deep learning works expressed in NLP-maths terms. Every neuron essentially does no more than run a logistic regression. Feed them into each other recursively to get highly non-linear decision boundary - enables function approximation of very complicated functions. Deep networks need big non-linearities otherwise the deep nature won't offer benefits. Back-propagation (stochastic gradient descent) helps to make sure that lower layers learn good stuff. Unsupervised pre-training super important for performance of deep structures.
2014-08-21	https://www.youtube.com/watch?v=6PmFSv5mg_E	Deep Learning for NLP (without Magic) - Part 3	Machine Learning	Using neural network to learn word vectors (for context). Take a word in context (positive example), replace word with unrelated word to generate negative example. Create vocabulary table. This gives representation of each word. Need to learn a function to combine these to phrases. Train neural net to discriminate between positive and negative phrases previously generated.
2014-08-22	https://www.youtube.com/watch?v=M3uWx-fhjUc	JavaScript Programming in the Large with Closure Tools	Libraries	Problems with JavaScript for large applications: no type checking, no namespaces, no access modifiers, difficult to modularize, managing dependencies. Unified set of tools to help: Closure (library, templates and compiler). Closure compiler can strip out unneeded parts of libraries so need to track minimal set of dependencies by hand. Removes whitespace, uglifies, rewrites/optimizes code to only have minimal code needed to cover all paths that are actually optimized. Can also eliminate platform-specific code. Also does type-checking using annotations.
